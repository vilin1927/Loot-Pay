import { db } from '../../database/connection';
import { logger } from '../../utils/logger';

// Question types
export type QuestionNumber = 1 | 2 | 3;

// Answer texts mapping for callback data
export const ANSWER_TEXTS = {
  'q1_games': 'üéÆ –ò–≥—Ä—ã ‚Äî –ø–æ–∫—É–ø–∞—é –Ω–æ–≤–∏–Ω–∫–∏ –∏ –∫–ª–∞—Å—Å–∏–∫—É',
  'q1_items': '‚ú® –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ —à—Ç—É–∫–∏, –∫–µ–π—Å—ã, –±–æ–µ–≤—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏',
  'q1_other': 'üß∏ –î—Ä—É–≥–æ–µ ‚Äî —á—Ç–æ-—Ç–æ –µ—â—ë, –Ω–µ –∏–∑ —ç—Ç–æ–≥–æ',
  'q1_none': 'üßò –í–æ–æ–±—â–µ –Ω–µ —Ç—Ä–∞—á—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∏–∂—É, –Ω–µ –ø–æ–∫—É–ø–∞—é',
  'q2_yes': 'üëç –î–∞, —é–∑–∞—é',
  'q2_abandoned': 'üëå –î–∞, –Ω–æ –∑–∞–±—Ä–æ—Å–∏–ª(–∞)',
  'q2_no': '‚ùå –ù–µ—Ç',
  'q3_yes': '‚úÖ –î–∞, –æ–∫',
  'q3_uk': 'üá¨üáß –Ø –∏–∑ –ë—Ä–∏—Ç–∞–Ω–∏–∏',
  'q3_no': '‚ùå –ù–µ—Ç, –Ω–µ –≤ —Ç–µ–º—É'
};

// Question data according to PRD requirements
export const QUESTIONS = {
  1: {
    text: "–ù–∞ —á—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ç–∏—à—å –¥–µ–Ω—å–≥–∏ –≤ Steam?",
    options: [
      { text: "üéÆ –ò–≥—Ä—ã ‚Äî –ø–æ–∫—É–ø–∞—é –Ω–æ–≤–∏–Ω–∫–∏ –∏ –∫–ª–∞—Å—Å–∏–∫—É", value: "games" },
      { text: "‚ú® –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ —à—Ç—É–∫–∏, –∫–µ–π—Å—ã, –±–æ–µ–≤—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏", value: "items" },
      { text: "üß∏ –î—Ä—É–≥–æ–µ ‚Äî —á—Ç–æ-—Ç–æ –µ—â—ë, –Ω–µ –∏–∑ —ç—Ç–æ–≥–æ", value: "other" },
      { text: "üßò –í–æ–æ–±—â–µ –Ω–µ —Ç—Ä–∞—á—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∏–∂—É, –Ω–µ –ø–æ–∫—É–ø–∞—é", value: "none" }
    ]
  },
  2: {
    text: "–ü—Ä–æ–±–æ–≤–∞–ª(–∞) –¥—Ä—É–≥–∏–µ –ø–æ–ø–æ–ª–Ω—è–ª–∫–∏?",
    options: [
      { text: "üëç –î–∞, —é–∑–∞—é", value: "yes" },
      { text: "üëå –î–∞, –Ω–æ –∑–∞–±—Ä–æ—Å–∏–ª(–∞)", value: "abandoned" },
      { text: "‚ùå –ù–µ—Ç", value: "no" }
    ]
  },
  3: {
    text: "–ú—ã –¥–µ–ª–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ USD –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω (–∫—Ä–æ–º–µ UK) ‚Äî –≥—É–¥?",
    options: [
      { text: "‚úÖ –î–∞, –æ–∫", value: "yes" },
      { text: "üá¨üáß –Ø –∏–∑ –ë—Ä–∏—Ç–∞–Ω–∏–∏", value: "uk" },
      { text: "‚ùå –ù–µ—Ç, –Ω–µ –≤ —Ç–µ–º—É", value: "no" }
    ]
  }
} as const;

// Save user response - now accepts full question and answer text
export async function saveResponse(
  userId: number,
  questionNumber: QuestionNumber,
  questionText: string,
  answerText: string
) {
  try {
    // Upsert response
    const [response] = await db('user_responses')
      .insert({
        user_id: userId,
        question_number: questionNumber,
        question_text: questionText,
        answer_text: answerText
      })
      .onConflict(['user_id', 'question_number'])
      .merge()
      .returning('*');

    logger.info('Saved questionnaire response', {
      userId,
      questionNumber,
      answerText
    });

    return response;
  } catch (error) {
    logger.error('Error saving questionnaire response', {
      error,
      userId,
      questionNumber
    });
    throw error;
  }
}

// Get all user responses
export async function getUserResponses(userId: number) {
  try {
    const responses = await db('user_responses')
      .where({ user_id: userId })
      .orderBy('question_number', 'asc');

    logger.debug('Retrieved user responses', {
      userId,
      count: responses.length
    });

    return responses;
  } catch (error) {
    logger.error('Error getting user responses', {
      error,
      userId
    });
    throw error;
  }
}

// Check if questionnaire is complete
export async function isQuestionnaireComplete(userId: number): Promise<boolean> {
  try {
    const responses = await getUserResponses(userId);
    
    // Check if we have all 3 questions answered
    const isComplete = responses.length === 3;

    logger.debug('Checked questionnaire completion', {
      userId,
      isComplete,
      responseCount: responses.length
    });

    return isComplete;
  } catch (error) {
    logger.error('Error checking questionnaire completion', {
      error,
      userId
    });
    throw error;
  }
}

// Get next question number
export async function getNextQuestionNumber(userId: number): Promise<QuestionNumber | null> {
  try {
    const responses = await getUserResponses(userId);
    
    // If all questions answered, return null
    if (responses.length >= 3) {
      return null;
    }

    // Next question is current count + 1
    const nextQuestion = (responses.length + 1) as QuestionNumber;

    logger.debug('Got next question number', {
      userId,
      nextQuestion
    });

    return nextQuestion;
  } catch (error) {
    logger.error('Error getting next question number', {
      error,
      userId
    });
    throw error;
  }
}

interface QuestionnaireAnswers {
  q1: string;
  q2: string;
  q3: string;
}

/**
 * Save questionnaire answers
 */
export async function saveQuestionnaireAnswers(
  userId: number,
  answers: QuestionnaireAnswers
): Promise<void> {
  try {
    await db('questionnaire_answers')
      .insert({
        user_id: userId,
        q1_answer: answers.q1,
        q2_answer: answers.q2,
        q3_answer: answers.q3,
        created_at: new Date()
      });

    logger.info('Questionnaire answers saved', {
      userId,
      answers
    });
  } catch (error) {
    logger.error('Error saving questionnaire answers', {
      error,
      userId
    });
    throw error;
  }
}

/**
 * Get questionnaire answers
 */
export async function getQuestionnaireAnswers(
  userId: number
): Promise<QuestionnaireAnswers | null> {
  try {
    const answers = await db('questionnaire_answers')
      .where({ user_id: userId })
      .first();

    return answers ? {
      q1: answers.q1_answer,
      q2: answers.q2_answer,
      q3: answers.q3_answer
    } : null;
  } catch (error) {
    logger.error('Error getting questionnaire answers', {
      error,
      userId
    });
    throw error;
  }
} 