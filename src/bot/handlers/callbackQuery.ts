import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../utils/logger';
import { handleStartPayment, handleStartCommand } from './start';
import { handleQuestionResponse } from '../flows/questionnaire/questionnaireHandler';
import { handleError } from '../../utils/errorHandler';
import { findOrCreateUser } from '../../services/user/userService';
import { setState, getState } from '../../services/state/stateService';
import { showPaymentConfirmation } from '../flows/paymentConfirmation';
import { createPayment } from '../../services/payment/paymentService';
import { showTransactionHistory } from '../flows/transactionHistory';
import { Message } from 'node-telegram-bot-api';
import { getSystemSetting } from '../../services/settings/settingsService';
import { analyticsService } from '../../services/analytics/analyticsService';
import { registerUserActivity } from '../idleReminder';

// Helper functions
async function trackAmountButtonClick(userId: number, amount: number) {
  try {
    await analyticsService.trackEvent(userId, 'amount_button_clicked', {
      amount_usd: amount,
      selection_method: 'preset_button',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    logger.warn('Amount button analytics failed', { error, userId, amount });
  }
}

export async function handleAmountSelected(bot: TelegramBot, chatId: number, userId: number, amount: number) {
  // Get existing state to preserve steamUsername AND transactionId
  const currentState = await getState(userId);
  const existingData = currentState?.state_data || {};
  
  // ‚úÖ CRITICAL FIX: Preserve transactionId when storing amount
  await setState(userId, 'AMOUNT_SELECTED', { 
    ...existingData,
    amountUSD: amount 
  });
  
  logger.info('Amount selected, preserving transactionId', {
    userId,
    amount,
    transactionId: existingData.transactionId,
    steamUsername: existingData.steamUsername
  });
  
  await showPaymentConfirmation(bot, chatId, userId);
}

async function handleCustomAmountPrompt(bot: TelegramBot, chatId: number, userId: number) {
  // ‚úÖ FIX: Preserve existing state data instead of clearing it
  const currentState = await getState(userId);
  const existingData = currentState?.state_data || {};
  
  // Get dynamic limits from database
  const minAmount = Number(await getSystemSetting('min_amount_usd')) || 1;
  const maxAmount = Number(await getSystemSetting('max_amount_usd')) || 100;
  
  await bot.sendMessage(chatId, `üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ USD (–æ—Ç ${minAmount} –¥–æ ${maxAmount}):`);
  await setState(userId, 'AWAITING_CUSTOM_AMOUNT', existingData);
  
  logger.info('Custom amount prompt shown, preserving state', {
    userId,
    preservedData: existingData
  });
}

// Handle callback queries
export async function handleCallbackQuery(
  bot: TelegramBot,
  query: TelegramBot.CallbackQuery
): Promise<void> {
  try {
    if (!query.message?.chat.id || !query.from?.id) {
      throw new Error('Missing chat or user ID in callback query');
    }

    const chatId = query.message.chat.id;
    const telegramId = query.from.id;
    const data = query.data;

    if (!data) {
      throw new Error('Missing callback data');
    }

    logger.debug('Processing callback query', { telegramId, data, queryId: query.id });

    // Register user activity for inactivity tracking
    registerUserActivity(telegramId);

    // Answer callback query immediately to prevent loading state
    await bot.answerCallbackQuery(query.id);

    // Get or create user to get database user.id
    const user = await findOrCreateUser({
      id: telegramId,
      username: query.from?.username,
      first_name: query.from?.first_name,
      last_name: query.from?.last_name
    });

    const userId = user.id; // Use database user.id, not telegram_id

    // Track callback interaction for analytics
    try {
      await analyticsService.trackEvent(userId, 'callback_interaction', {
        action: data,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      logger.warn('Callback analytics failed', { error, userId, action: data });
    }

    // Handle questionnaire responses
    if (data.startsWith('q')) {
      const [questionPart, answer] = data.split('_');
      const questionNumber = parseInt(questionPart.substring(1)) as 1 | 2 | 3;
      
      await handleQuestionResponse(bot, chatId, userId, questionNumber, answer);
      logger.info('Questionnaire response handled', { telegramId, userId, questionNumber, answer });
      return;
    }

    // Handle other button clicks
    switch (data) {
      case 'start_payment':
      case 'fund_steam':
        // Track gift button click for User 22 (special analytics)
        if (userId === 22) {
          await analyticsService.trackEvent(userId, 'gift_offer_clicked', {
            messageId: query.message?.message_id,
            offerType: 'bonus_2usd_on_5usd',
            clickedAt: new Date().toISOString(),
            telegramId: telegramId,
            buttonText: 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫'
          });
          logger.info('Gift offer button clicked by User 22', { userId, telegramId });
        }
        await handleStartPayment(bot, chatId, userId);
        break;

      // Amount selection handlers
      case 'amount_5':
        await trackAmountButtonClick(userId, 5);
        await handleAmountSelected(bot, chatId, userId, 5);
        break;
      case 'amount_10':
        await trackAmountButtonClick(userId, 10);
        await handleAmountSelected(bot, chatId, userId, 10);
        break;
      case 'amount_25':
        await trackAmountButtonClick(userId, 25);
        await handleAmountSelected(bot, chatId, userId, 25);
        break;
      case 'amount_50':
        await trackAmountButtonClick(userId, 50);
        await handleAmountSelected(bot, chatId, userId, 50);
        break;
      case 'amount_custom':
        await handleCustomAmountPrompt(bot, chatId, userId);
        break;

      // Payment confirmation handlers
      case 'confirm_payment':
        await handlePaymentConfirmation(bot, chatId, userId);
        break;

      case 'steam_username':
        await bot.sendMessage(chatId, 'üéÆ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Steam –∞–∫–∫–∞—É–Ω—Ç–∞:');
        await setState(userId, 'STEAM_USERNAME', {});
        break;

      case 'show_history':
      case 'my_transactions':
        await showTransactionHistory(bot, chatId, userId, 0);
        break;

      case 'show_support':
      case 'support':
        await bot.sendMessage(chatId, `
üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞ LootPay

üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:
@lootpay_support - Telegram
support@lootpay.ru - Email

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7
üì± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 15 –º–∏–Ω—É—Ç
        `, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìû –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', url: 'https://t.me/lootpay_support' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        });
        break;

      case 'security_faq':
        await bot.sendMessage(chatId, `üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å LootPay

1Ô∏è‚É£ –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π) ‚Äì
   –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏.

2Ô∏è‚É£ –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –±–∞–Ω–∫–æ–≤—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
   –∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É PCI-DSS.

3Ô∏è‚É£ –ú—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ–º —Å PayDigital.shop
   ‚Äì –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º Steam –≤ –†–§.

4Ô∏è‚É£ –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –ª—é–±—ã—Ö
   —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—è—Ö (24 —á–∞—Å–∞).

üîé –•–æ—Ç–∏—Ç–µ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º—ã –ø–∞—Ä—Ç–Ω—ë—Ä—ã PayDigital?
–ù–∞–ø–∏—à–∏—Ç–µ –≤ @paydigital_support ‚Äì –æ–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥—è—Ç.

–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äì –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìû PayDigital –ø–æ–¥–¥–µ—Ä–∂–∫–∞', url: 'https://t.me/paydigital_support' }],
              [{ text: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å LootPay', url: 'https://t.me/lootpay_support' }],
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        });
        break;

      case 'main_menu':
        // Return user to main menu - use start command for proper main menu
        await handleStartCommand({ chat: { id: chatId }, from: { id: telegramId } } as Message);
        break;

      case 'steam_login_help':
        await bot.sendMessage(chatId, `
üéÆ –ü–æ–º–æ—â—å —Å –ª–æ–≥–∏–Ω–æ–º Steam

üìù –ö–∞–∫ –Ω–∞–π—Ç–∏ —Å–≤–æ–π –ª–æ–≥–∏–Ω Steam:

1Ô∏è‚É£ –ß–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç Steam:
   ‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Steam –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ
   ‚Ä¢ –í–∞—à –ª–æ–≥–∏–Ω —É–∫–∞–∑–∞–Ω –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É

2Ô∏è‚É£ –ß–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä:
   ‚Ä¢ –ó–∞–π–¥–∏—Ç–µ –Ω–∞ steamcommunity.com
   ‚Ä¢ –í–∞—à –ª–æ–≥–∏–Ω –≤ URL: steamcommunity.com/id/–í–ê–®_–õ–û–ì–ò–ù/

3Ô∏è‚É£ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ª–æ–≥–∏–Ω–æ–≤:
   ‚Ä¢ nickname123
   ‚Ä¢ player_2024
   ‚Ä¢ steam_user

‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
   ‚Ä¢ Email –∞–¥—Ä–µ—Å
   ‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
   ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω

üí° –°–æ–≤–µ—Ç: –õ–æ–≥–∏–Ω Steam - —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–æ–∑–¥–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        `, {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
            ]]
          }
        });
        break;

      case 'show_info':
      case 'about':
        await bot.sendMessage(chatId, `üìÑ –û LootPay

LootPay - —ç—Ç–æ —Å–µ—Ä–≤–∏—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è Steam –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ –°–ë–ü.

üéÅ –†–û–ó–´–ì–†–´–® –ê–†–ö–ê–ù–´ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ¬´–ö—Ä–∏–ø–æ—á–∫–∏ –¢—ã—Å—è—á–Ω–æ–≥–æ –†–∞–Ω–≥–∞¬ª ‚Äî —É—á–∞—Å—Ç–∏–µ –æ—Ç $5 / 400 ‚ÇΩ!

üí∞ –ö–æ–º–∏—Å—Å–∏—è: 10% –æ—Ç —Å—É–º–º—ã
üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1$
‚ö°Ô∏è –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ

üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –°–ë–ü  
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞  
‚Ä¢ 100+ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π  
‚Ä¢ –ü–∞—Ä—Ç–Ω—ë—Ä PayDigital.shop (@paydigital_support)

üìã –û—Ñ–µ—Ä—Ç–∞: https://telegra.ph/LootPay-05-31 
‚ùì FAQ: https://telegra.ph/LootPay-05-31#FAQ`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ]
          }
        });
        break;

      default:
        if (data.startsWith('history_page_')) {
          const page = parseInt(data.split('_')[2]);
          await showTransactionHistory(bot, chatId, userId, page);
          return;
        }
        
        // Handle dynamic amount buttons (amount_1, amount_2, amount_3, etc.)
        if (data.startsWith('amount_') && data !== 'amount_custom') {
          const amount = parseFloat(data.replace('amount_', ''));
          if (!isNaN(amount) && amount > 0) {
            await handleAmountSelected(bot, chatId, userId, amount);
            return;
          }
        }
        
        logger.warn('Unknown callback data', { data, telegramId, userId });
        break;
    }

    logger.info('Callback query handled successfully', {
      telegramId,
      userId,
      data
    });
  } catch (error) {
    logger.error('Error handling callback query', {
      error,
      query: {
        id: query.id,
        data: query.data,
        from: query.from?.id
      }
    });
    if (query.message?.chat.id) {
      await handleError(query.message.chat.id, error as Error);
    }
  }
}

async function handlePaymentConfirmation(bot: TelegramBot, chatId: number, userId: number) {
  try {
    const state = await getState(userId);
    
    // ‚úÖ CRITICAL: Check for both required parameters
    if (!state?.state_data?.amountUSD || !state?.state_data?.transactionId) {
      const missingFields = [];
      if (!state?.state_data?.amountUSD) missingFields.push('amountUSD');
      if (!state?.state_data?.transactionId) missingFields.push('transactionId');
      
      logger.error('Missing required payment data', { 
        userId, 
        missingFields,
        stateData: state?.state_data 
      });
      
      throw new Error(`Missing payment data: ${missingFields.join(', ')}`);
    }

    // Check if Steam username is set
    if (!state.state_data.steamUsername) {
      logger.info('Steam username missing in payment confirmation, redirecting to Steam username flow', { userId });
      await bot.sendMessage(chatId, 'üéÆ –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Steam –∞–∫–∫–∞—É–Ω—Ç–∞:');
      await setState(userId, 'STEAM_USERNAME', { amountUSD: state.state_data.amountUSD });
      return;
    }

    await bot.sendMessage(chatId, '‚è≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...');

    const { steamUsername, amountUSD, transactionId } = state.state_data;
    
    // ‚úÖ CRITICAL FIX: Pass all required parameters including transactionId
    const payment = await createPayment(userId, steamUsername, amountUSD, transactionId);

    await bot.sendMessage(chatId, `üí≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!

üîó –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: `üí≥ –û–ø–ª–∞—Ç–∏—Ç—å ${payment.totalAmountRUB}‚ÇΩ`, url: payment.paymentUrl }],
          [{ text: 'üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }]
        ]
      }
    });

    logger.info('Payment created successfully with required transactionId', {
      userId,
      steamUsername,
      amountUSD,
      transactionId,
      paymentUrl: payment.paymentUrl,
      databaseTransactionId: payment.transactionId
    });

  } catch (error) {
    logger.error('Error in payment confirmation', { 
      error: error instanceof Error ? {
        message: error.message,
        stack: error.stack,
        name: error.name
      } : error,
      userId 
    });
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
  }
} 