import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../utils/logger';
import { getState, setState, clearState } from '../../services/state/stateService';
import { handleQuestion1 } from '../flows/questionnaire/question1';
import { handleQuestion2 } from '../flows/questionnaire/question2';
import { handleQuestion3 } from '../flows/questionnaire/question3';
import { handleError } from '../../utils/errorHandler';
import { handleSteamUsernameRequest } from '../flows/steamUsername';
import { handleAmountSelection } from '../flows/amountSelection';
import { handlePaymentConfirmation } from '../flows/paymentConfirmation';
import { formatRussianCurrency } from '../../utils/locale';
import { findOrCreateUser } from '../../services/user/userService';
import { sendQuestion } from '../flows/questionnaire/questionnaireHandler';

const MIN_AMOUNT_USD = 5;
const MIN_AMOUNT_RUB = formatRussianCurrency(MIN_AMOUNT_USD * 80); // Using default exchange rate for MVP

// Messages
const WELCOME_MESSAGE = `–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ üéÆ LootPay!
–ë–æ—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è Steam –∫–æ—à–µ–ª—å–∫–∞
–ó–Ω–∞–∫–æ–º–æ? –ë—ã–ª–æ?
‚è≥ –í—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç, –∏ –±–∞–ª–∞–Ω—Å –≤ Steam –ø–æ–ø–æ–ª–Ω–µ–Ω‚Ä¶
üò§ –ê –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ ‚Äî –¥–æ–ª–≥–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è, —Å–∫—Ä—ã—Ç—ã–µ –Ω–∞—Ü–µ–Ω–∫–∏ –∏ —Ç—Ä–µ–≤–æ–≥–∞, —á—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –¥–æ–π–¥—É—Ç.
‚ú® –°  LootPay —Ç–∞–∫–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç ‚ú®
‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ
–ü–æ–ø–æ–ª–Ω—è–π Steam –∑–∞ 15 –º–∏–Ω—É—Ç
—Å —É–¥–æ–±–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π, —á–µ—Å—Ç–Ω—ã–º –∫—É—Ä—Å–æ–º –∏ –±–µ–∑ —Ä–∏—Å–∫–∞ –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º ‚è±Ô∏è
üîπ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è 10% ‚Äî –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ü–µ–Ω–æ–∫
üîπ –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ —Å–±–æ—è—Ö
üîπ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ‚ãØ
üí≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç ${MIN_AMOUNT_RUB} / ${MIN_AMOUNT_USD} USD ‚Äî –ª—é–±—ã–µ –†–§-–∫–∞—Ä—Ç—ã –∏–ª–∏ –°–ë–ü
üî∏ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?
1Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞, –≤–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –≤–≤–µ–¥–∏ Steam ID
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏ —Å—É–º–º—É –∏ –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ –°–ë–ü
3Ô∏è‚É£ –ü–æ–ª—É—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ üéâ
–ü–æ–ø–æ–ª–Ω—è–π –±–µ–∑ —Ä–∏—Å–∫–∞ –∏ –æ–±–º–∞–Ω–∞ ‚Äî –≤–º–µ—Å—Ç–µ —Å üéÆ LootPay!`;

const FIRST_QUESTION = `üìã –î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –±—ã—Å—Ç—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ª—É—á—à–µ –≤–∞—Å –ø–æ–Ω–∏–º–∞—Ç—å.
‚ùì –ù–∞ —á—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ —Ç—Ä–∞—Ç–∏—à—å –¥–µ–Ω—å–≥–∏ –≤ Steam?`;

const CONTINUE_MESSAGE = `
‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è.

–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?`;

const MAIN_MENU_MESSAGE = `
üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

// Main menu buttons
const MAIN_MENU_BUTTONS = [
  [{ text: 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å Steam', callback_data: 'start_payment' }],
  [{ text: 'üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π', callback_data: 'show_history' }],
  [{ text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'show_support' }],
  [{ text: 'üìÑ –û –Ω–∞—Å / –û—Ñ–µ—Ä—Ç–∞ / FAQ', callback_data: 'show_info' }]
];

// First question buttons
const FIRST_QUESTION_BUTTONS = [
  [
    { text: 'üéÆ –ò–≥—Ä—ã ‚Äî –ø–æ–∫—É–ø–∞—é –Ω–æ–≤–∏–Ω–∫–∏ –∏ –∫–ª–∞—Å—Å–∏–∫—É', callback_data: 'q1_games' }
  ],
  [
    { text: '‚ú® –í–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã–µ —à—Ç—É–∫–∏, –∫–µ–π—Å—ã, –±–æ–µ–≤—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏', callback_data: 'q1_items' }
  ],
  [
    { text: 'üß∏ –î—Ä—É–≥–æ–µ ‚Äî —á—Ç–æ-—Ç–æ –µ—â—ë, –Ω–µ –∏–∑ —ç—Ç–æ–≥–æ', callback_data: 'q1_other' }
  ],
  [
    { text: 'üßò –í–æ–æ–±—â–µ –Ω–µ —Ç—Ä–∞—á—É ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∏–∂—É, –Ω–µ –ø–æ–∫—É–ø–∞—é', callback_data: 'q1_none' }
  ]
];

// Continue buttons
const CONTINUE_BUTTONS = [
  [
    { text: '‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: 'continue_flow' },
    { text: '‚ùå –ù–µ—Ç, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'restart_flow' }
  ]
];

/**
 * Handle /start command
 */
export async function handleStart(
  bot: TelegramBot,
  chatId: number,
  userId: number,
  userInfo: {
    username?: string;
    first_name?: string;
    last_name?: string;
  }
): Promise<void> {
  try {
    // First, ensure user exists in database
    const user = await findOrCreateUser({
      id: userId,
      username: userInfo.username,
      first_name: userInfo.first_name,
      last_name: userInfo.last_name
    });

    if (!user) {
      throw new Error('Failed to create or find user');
    }

    // Clear any existing state using database user.id
    await clearState(user.id);

    // Send welcome message with main menu buttons
    await bot.sendMessage(chatId, WELCOME_MESSAGE, {
      reply_markup: {
        inline_keyboard: MAIN_MENU_BUTTONS
      }
    });

    logger.info('Start command handled', { 
      userId,
      databaseUserId: user.id 
    });
  } catch (error) {
    logger.error('Error handling start command', {
      error,
      userId
    });
    await handleError(chatId, error as Error);
  }
}

// Handle start payment button click
export async function handleStartPayment(
  bot: TelegramBot,
  chatId: number,
  userId: number
): Promise<void> {
  try {
    // Start with first question
    await sendQuestion(bot, chatId, userId, 1);

    logger.info('Started questionnaire', {
      userId
    });
  } catch (error) {
    logger.error('Error starting questionnaire', {
      error,
      userId
    });
    await handleError(chatId, error as Error);
  }
}

async function startNewQuestionnaire(
  bot: TelegramBot,
  chatId: number,
  userId: number
): Promise<void> {
  // Send welcome message
  await bot.sendMessage(chatId, WELCOME_MESSAGE);

  // Start questionnaire
  await handleQuestion1(bot, chatId, userId);
}

/**
 * Handle continue flow callback
 */
export async function handleContinueFlow(
  bot: TelegramBot,
  chatId: number,
  userId: number
) {
  try {
    // Get state
    const state = await getState(userId);
    if (!state) {
      throw new Error('No state to continue');
    }

    // Restore previous step
    switch (state.current_state) {
      case 'STEAM_USERNAME':
        await handleSteamUsernameRequest(bot, chatId, userId);
        break;

      case 'AMOUNT_SELECTION':
        await handleAmountSelection(bot, chatId, userId);
        break;

      case 'AMOUNT_SELECTED':
        await handlePaymentConfirmation(bot, chatId, userId);
        break;

      default:
        // Clear invalid state
        await clearState(userId);
        await handleStart(bot, chatId, userId, {
          username: undefined,
          first_name: undefined,
          last_name: undefined
        });
    }

    logger.info('Flow continued', {
      userId,
      state: state.current_state
    });

  } catch (error) {
    logger.error('Error continuing flow', {
      error,
      userId
    });

    // Clear state and show main menu
    await clearState(userId);
    await handleStart(bot, chatId, userId, {
      username: undefined,
      first_name: undefined,
      last_name: undefined
    });
  }
}

/**
 * Handle restart flow callback
 */
export async function handleRestartFlow(
  bot: TelegramBot,
  chatId: number,
  userId: number
) {
  try {
    // Clear state
    await clearState(userId);

    // Show main menu
    await bot.sendMessage(
      chatId,
      MAIN_MENU_MESSAGE,
      {
        reply_markup: {
          inline_keyboard: MAIN_MENU_BUTTONS
        }
      }
    );

    logger.info('Flow restarted', { userId });

  } catch (error) {
    logger.error('Error restarting flow', {
      error,
      userId
    });

    // Send error message
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
} 