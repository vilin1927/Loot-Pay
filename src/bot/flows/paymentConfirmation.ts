import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../utils/logger';
import { getState, setState } from '../../services/state/stateService';
import { createPayment } from '../../services/payment/paymentService';
import { handleSteamUsernameRequest } from './steamUsername';
import { handleAmountSelection } from './amountSelection';
import { formatRussianCurrency } from '../../utils/locale';

const PAYMENT_ERROR = `üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ. 
–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è ‚Äî –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`;

// Payment confirmation message
const PAYMENT_DETAILS = (username: string, amountUSD: number, amountRUB: number) => `üîé –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:

üßæ –£—Å–ª—É–≥–∞: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam 
üë§ –ê–∫–∫–∞—É–Ω—Ç: ${username}
üíµ –°—É–º–º–∞: ${amountUSD} USD (‚âà${formatRussianCurrency(amountRUB)}) ‚Äî **–∫–æ–º–∏—Å—Å–∏—è 10% —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞**

‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–≥–∏–Ω –∏ —Å—É–º–º–∞ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ. 
–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç —É–π—Ç–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
–ï—Å–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ üëá`;

// Handle payment confirmation
export async function handlePaymentConfirmation(
  bot: TelegramBot,
  chatId: number,
  userId: number
): Promise<void> {
  try {
    // Get state
    const state = await getState(userId);
    if (!state || state.current_state !== 'AMOUNT_SELECTED') {
      throw new Error('Invalid state for payment confirmation');
    }

    // ‚úÖ CHECK: Ensure we have required data including transactionId
    const { steamUsername, amountUSD, transactionId } = state.state_data;
    
    if (!steamUsername || !amountUSD || !transactionId) {
      logger.error('Missing required payment data in legacy flow', {
        userId,
        hasUsername: !!steamUsername,
        hasAmount: !!amountUSD,
        hasTransactionId: !!transactionId
      });
      throw new Error('Missing required payment data');
    }

    // ‚úÖ USE: New centralized payment service with required transactionId
    const payment = await createPayment(userId, steamUsername, amountUSD, transactionId);

    // Update state
    await setState(userId, 'PAYMENT_PENDING', {
      ...state.state_data,
      paymentUrl: payment.paymentUrl,
      databaseTransactionId: payment.transactionId
    });

    // Send payment confirmation
    await bot.sendMessage(
      chatId,
      PAYMENT_DETAILS(steamUsername, amountUSD, payment.totalAmountRUB),
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: `‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å –°–ë–ü [${formatRussianCurrency(payment.totalAmountRUB)}]`, url: payment.paymentUrl }
            ],
            [
              { text: 'üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω', callback_data: 'steam_username' },
              { text: 'üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data: 'amount_custom' }
            ]
          ]
        }
      }
    );

    logger.info('Legacy payment created using new service', {
      userId,
      amountUSD,
      totalAmountRUB: payment.totalAmountRUB,
      transactionId,
      databaseTransactionId: payment.transactionId
    });

  } catch (error) {
    logger.error('Error handling payment confirmation', {
      error,
      userId
    });

    // Send error message with buttons
    await bot.sendMessage(chatId, PAYMENT_ERROR, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω', callback_data: 'steam_username' },
            { text: 'üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data: 'amount_custom' }
          ],
          [
            { text: '‚ùóÔ∏è–ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }
          ]
        ]
      }
    });
    throw error;
  }
}

// Handle change Steam username
export async function handleChangeSteam(
  bot: TelegramBot,
  chatId: number,
  userId: number
) {
  await handleSteamUsernameRequest(bot, chatId, userId);
}

// Handle change amount
export async function handleChangeAmount(
  bot: TelegramBot,
  chatId: number,
  userId: number
) {
  await handleAmountSelection(bot, chatId, userId);
}

export async function showPaymentConfirmation(
  bot: TelegramBot,
  chatId: number,
  userId: number
) {
  try {
    const state = await getState(userId);
    if (!state?.state_data?.amountUSD) {
      throw new Error('Missing amount data');
    }

    // Check if Steam username is set
    if (!state.state_data.steamUsername) {
      logger.info('Steam username missing, redirecting to Steam username flow', { userId });
      await bot.sendMessage(chatId, 'üéÆ –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω Steam –∞–∫–∫–∞—É–Ω—Ç–∞:');
      await setState(userId, 'STEAM_USERNAME', { amountUSD: state.state_data.amountUSD });
      return;
    }

    const { steamUsername, amountUSD } = state.state_data;
    const exchangeRate = 90; // TODO: Get real rate
    const totalRUB = Math.round(amountUSD * exchangeRate * 1.1); // 10% commission

    const message = `üîé –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:

üßæ –£—Å–ª—É–≥–∞: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam 
üë§ –ê–∫–∫–∞—É–Ω—Ç: ${steamUsername}
üíµ –°—É–º–º–∞: ${amountUSD} USD (‚âà${totalRUB}‚ÇΩ)
üí∞ –ö–æ–º–∏—Å—Å–∏—è: 10% (—É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞)

‚ùóÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã!`;

    await bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: `‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å ${totalRUB}‚ÇΩ`, callback_data: 'confirm_payment' }],
          [
            { text: 'üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω', callback_data: 'steam_username' },
            { text: 'üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data: 'amount_custom' }
          ]
        ]
      }
    });

    logger.info('Payment confirmation shown', { userId, steamUsername, amountUSD });
  } catch (error) {
    logger.error('Error showing payment confirmation', { 
      error: error instanceof Error ? {
        message: error.message,
        stack: error.stack,
        name: error.name
      } : error,
      userId 
    });
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
} 