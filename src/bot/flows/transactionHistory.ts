import TelegramBot from 'node-telegram-bot-api';
import { getUserTransactions } from '../../services/transaction/transactionService';
import { logger } from '../../utils/logger';
import { formatRussianCurrency } from '../../utils/locale';

export async function showTransactionHistory(
  bot: TelegramBot,
  chatId: number,
  userId: number,
  page: number = 0
) {
  try {
    const { transactions, total, hasMore } = await getUserTransactions(userId, 3, page * 3);

    if (transactions.length === 0) {
      await bot.sendMessage(chatId, `üîç –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞

–ï—â—ë –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –±—ã–ª–æ —Å–æ–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è LootPay –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

üéÆ **–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:**
‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞ 5-15 –º–∏–Ω—É—Ç
‚Ä¢ –ß–µ—Å—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –Ω–∞—Ü–µ–Ω–æ–∫  
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7 –∏ –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
‚Ä¢ –£–¥–æ–±–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –°–ë–ü —Å –ª—é–±–æ–π –∫–∞—Ä—Ç—ã –†–§

üí° **–°–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π —Å—É–º–º—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–µ—Ä–≤–∏—Å–∞!`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –°–¥–µ–ª–∞—Ç—å –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: 'fund_steam' }],
            [{ text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }, { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
          ]
        }
      });
      return;
    }

    // Calculate summary statistics
    const totalUSDSpent = transactions.reduce((sum, tx) => sum + tx.amount_usd, 0);
    const totalRUBSpent = transactions.reduce((sum, tx) => sum + tx.amount_rub + tx.commission_rub, 0);
    const averageUSD = transactions.length > 0 ? totalUSDSpent / transactions.length : 0;
    const mostRecentDate = transactions.length > 0 ? new Date(transactions[0].created_at) : null;

    let message = `üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
    message += `üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: ${total}\n`;
    message += `‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalUSDSpent} USD (${formatRussianCurrency(totalRUBSpent)})\n`;
    if (transactions.length > 0) {
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${averageUSD.toFixed(1)} USD\n`;
      message += `‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ${mostRecentDate?.toLocaleDateString('ru-RU', {
        day: '2-digit', month: 'long', year: 'numeric'
      })}\n`;
    }
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    
    transactions.forEach((tx, index) => {
      const date = new Date(tx.created_at).toLocaleDateString('ru-RU', {
        day: '2-digit', month: '2-digit', year: 'numeric'
      });
      const time = new Date(tx.created_at).toLocaleTimeString('ru-RU', {
        hour: '2-digit', minute: '2-digit'
      });
      
      message += `${page * 3 + index + 1}. ‚úÖ ${date} –≤ ${time}\n`;
      message += `   üí∞ ${tx.amount_usd} USD ‚Üí ${formatRussianCurrency(tx.amount_rub + tx.commission_rub)}\n`;
      message += `   üéÆ ${tx.steam_username}\n`;
      message += `   üìä –ö—É—Ä—Å: ${tx.exchange_rate?.toFixed(2) || '–Ω/–¥'}‚ÇΩ/$\n\n`;
    });

    const keyboard = [];
    
    // Pagination buttons
    const navButtons = [];
    if (page > 0) navButtons.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `history_page_${page - 1}` });
    if (hasMore) navButtons.push({ text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: `history_page_${page + 1}` });
    if (navButtons.length > 0) keyboard.push(navButtons);

    // Action buttons
    keyboard.push([
      { text: 'üí∞ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: 'fund_steam' }
    ]);
    
    // Future expansion: transaction details
    // keyboard.push([
    //   { text: 'üìã –î–µ—Ç–∞–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–π', callback_data: 'transaction_details' }
    // ]);
    
    keyboard.push([
      { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'my_transactions' },
      { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
    ]);

    await bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    logger.error('Error showing transaction history', { error, userId });
    await bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç.`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'my_transactions' },
            { text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }
          ],
          [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
        ]
      }
    });
  }
} 