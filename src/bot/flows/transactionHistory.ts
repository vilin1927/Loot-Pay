import TelegramBot from 'node-telegram-bot-api';
import { getUserTransactions } from '../../services/transaction/transactionService';
import { logger } from '../../utils/logger';

export async function showTransactionHistory(
  bot: TelegramBot,
  chatId: number,
  userId: number,
  page: number = 0
) {
  try {
    const { transactions, total, hasMore } = await getUserTransactions(userId, 3, page * 3);

    if (transactions.length === 0) {
      await bot.sendMessage(chatId, `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üòî
–ù–æ —ç—Ç–æ –ª–µ–≥–∫–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ Steam-–∫–æ—à–µ–ª—ë–∫ –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç ‚Äî –±—ã—Å—Ç—Ä–æ, –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Å —á–µ—Å—Ç–Ω—ã–º –∫—É—Ä—Å–æ–º üí≥
üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å–µ–π—á–∞—Å', callback_data: 'fund_steam' }],
            [{ text: 'üîÑ –í –Ω–∞—á–∞–ª–æ', callback_data: 'main_menu' }]
          ]
        }
      });
      return;
    }

    let message = `üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π (${total} —É—Å–ø–µ—à–Ω—ã—Ö)\n\n`;
    
    transactions.forEach((tx) => {
      const date = new Date(tx.created_at).toLocaleDateString('ru-RU');
      // Since we only show completed transactions, always show ‚úÖ
      
      message += `‚úÖ ${date}\n`;
      message += `üí∞ ${tx.amount_usd} USD ‚Üí ${tx.amount_rub + tx.commission_rub}‚ÇΩ\n`;
      message += `üéÆ ${tx.steam_username}\n\n`;
    });

    const keyboard = [];
    
    // Pagination buttons
    const navButtons = [];
    if (page > 0) navButtons.push({ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `history_page_${page - 1}` });
    if (hasMore) navButtons.push({ text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: `history_page_${page + 1}` });
    if (navButtons.length > 0) keyboard.push(navButtons);

    // Action buttons
    keyboard.push([
      { text: 'üí∞ –ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data: 'fund_steam' },
      { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
    ]);

    await bot.sendMessage(chatId, message, {
      reply_markup: { inline_keyboard: keyboard }
    });

  } catch (error) {
    logger.error('Error showing transaction history', { error, userId });
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
} 