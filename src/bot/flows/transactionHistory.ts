import { Message } from 'node-telegram-bot-api';
import { getBotInstance } from '../botInstance';
import { logger } from '../../utils/logger';
import { getUserTransactions } from '../../services/transaction/transactionService';
import { formatRussianCurrency, formatMoscowTime } from '../../utils/locale';

// Constants
const TRANSACTIONS_PER_PAGE = 3;

// Messages
const NO_TRANSACTIONS_MESSAGE = `
üìù –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
`;

const HISTORY_HEADER = `
üìù –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

`;

const TRANSACTION_FORMAT = `
üí≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{id}
üí∞ –°—É–º–º–∞: {amount_rub}
üë§ Steam: {steam_username}
üìÖ –î–∞—Ç–∞: {date}
üìä –°—Ç–∞—Ç—É—Å: {status}
`;

// Status emojis
const STATUS_EMOJIS = {
  completed: '‚úÖ',
  pending: '‚è≥',
  failed: '‚ùå'
} as const;

// Status labels
const STATUS_LABELS = {
  completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
  pending: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
  failed: '–û—à–∏–±–∫–∞'
} as const;

type TransactionStatus = keyof typeof STATUS_EMOJIS;

/**
 * Handle transaction history request
 */
export async function handleTransactionHistory(
  chatId: number,
  userId: number,
  page: number = 0
) {
  try {
    // Get bot instance
    const bot = await getBotInstance();

    // Get transactions
    const { transactions, total } = await getUserTransactions(
      userId,
      TRANSACTIONS_PER_PAGE,
      page * TRANSACTIONS_PER_PAGE
    );

    // Show no transactions message
    if (transactions.length === 0) {
      await bot.sendMessage(chatId, NO_TRANSACTIONS_MESSAGE);
      return;
    }

    // Format transactions
    const formattedTransactions = transactions.map(formatTransaction).join('\n');

    // Create message
    const message = HISTORY_HEADER + formattedTransactions;

    // Create keyboard
    const keyboard = [];
    const totalPages = Math.ceil(total / TRANSACTIONS_PER_PAGE);

    // Add pagination buttons if needed
    if (totalPages > 1) {
      const paginationRow = [];
      
      if (page > 0) {
        paginationRow.push({
          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
          callback_data: `history_${page - 1}`
        });
      }
      
      if (page < totalPages - 1) {
        paginationRow.push({
          text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
          callback_data: `history_${page + 1}`
        });
      }

      if (paginationRow.length > 0) {
        keyboard.push(paginationRow);
      }
    }

    // Add main menu button
    keyboard.push([
      { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
    ]);

    // Send message
    await bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

    logger.info('Transaction history shown', {
      userId,
      page,
      count: transactions.length,
      total
    });

  } catch (error) {
    logger.error('Error showing transaction history', {
      error,
      userId
    });

    // Get bot instance for error message
    const bot = await getBotInstance();

    // Send error message
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
}

/**
 * Format single transaction
 */
function formatTransaction(transaction: {
  id: number;
  amount_rub: number;
  commission_rub: number;
  steam_username: string;
  created_at: string;
  status: TransactionStatus;
}): string {
  // Format amount
  const formattedAmount = formatRussianCurrency(transaction.amount_rub + transaction.commission_rub);

  // Format date
  const formattedDate = formatMoscowTime(new Date(transaction.created_at));

  return TRANSACTION_FORMAT
    .replace('{id}', transaction.id.toString())
    .replace('{amount_rub}', formattedAmount)
    .replace('{steam_username}', transaction.steam_username)
    .replace('{date}', formattedDate)
    .replace('{status}', `${STATUS_EMOJIS[transaction.status]} ${STATUS_LABELS[transaction.status]}`);
} 