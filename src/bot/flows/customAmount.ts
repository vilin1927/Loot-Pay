import { logger } from '../../utils/logger';
import { setState } from '../../services/state/stateService';
import { getBotInstance } from '../botInstance';

// Amount limits
const MIN_AMOUNT = 2;
const MAX_AMOUNT = 100;

// Messages
const CUSTOM_AMOUNT_MESSAGE = `
üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (USD):

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_AMOUNT}$
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MAX_AMOUNT}$

–ù–∞–ø—Ä–∏–º–µ—Ä: 25.50
`;

const TOO_SMALL_MESSAGE = `
‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è.

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MIN_AMOUNT}$

–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é:
`;

const TOO_LARGE_MESSAGE = `
‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è.

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: ${MAX_AMOUNT}$

–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é:
`;

const INVALID_FORMAT_MESSAGE = `
‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.

–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ${MIN_AMOUNT} –¥–æ ${MAX_AMOUNT}$.
–ù–∞–ø—Ä–∏–º–µ—Ä: 25.50

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:
`;

// Quick-fix buttons
const MIN_AMOUNT_BUTTON = {
  text: `–ú–∏–Ω–∏–º—É–º (${MIN_AMOUNT}$)`,
  callback_data: `amount_${MIN_AMOUNT}`
};

const MAX_AMOUNT_BUTTON = {
  text: `–ú–∞–∫—Å–∏–º—É–º (${MAX_AMOUNT}$)`,
  callback_data: `amount_${MAX_AMOUNT}`
};

// Handle custom amount request
export async function handleCustomAmountRequest(
  chatId: number,
  userId: number
) {
  try {
    // Set state to amount selection
    await setState(userId, 'AMOUNT_SELECTION', {
      started_at: new Date().toISOString()
    });

    // Get bot instance and show message
    const bot = await getBotInstance();
    await bot.sendMessage(chatId, CUSTOM_AMOUNT_MESSAGE);

    logger.info('Custom amount requested', { userId });

  } catch (error) {
    logger.error('Error requesting custom amount', {
      error,
      userId
    });

    // Send error message
    const bot = await getBotInstance();
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
}

// Handle custom amount input
export async function handleCustomAmountInput(
  chatId: number,
  userId: number,
  input: string
) {
  try {
    const bot = await getBotInstance();

    // Parse amount
    const amount = parseFloat(input);

    // Validate format
    if (isNaN(amount)) {
      await bot.sendMessage(chatId, INVALID_FORMAT_MESSAGE);
      return;
    }

    // Validate minimum
    if (amount < MIN_AMOUNT) {
      await bot.sendMessage(chatId, TOO_SMALL_MESSAGE, {
        reply_markup: {
          inline_keyboard: [[MIN_AMOUNT_BUTTON]]
        }
      });
      return;
    }

    // Validate maximum
    if (amount > MAX_AMOUNT) {
      await bot.sendMessage(chatId, TOO_LARGE_MESSAGE, {
        reply_markup: {
          inline_keyboard: [[MAX_AMOUNT_BUTTON]]
        }
      });
      return;
    }

    // Set amount and proceed to payment confirmation
    await setState(userId, 'AMOUNT_SELECTED', { 
      amountUSD: amount,
      // TODO: Calculate total amount with commission
      totalAmountRUB: amount * 90 // Placeholder exchange rate
    });

    // Send confirmation message
    await bot.sendMessage(
      chatId, 
      `‚úÖ –°—É–º–º–∞ ${amount} USD –≤—ã–±—Ä–∞–Ω–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞.`
    );

    logger.info('Custom amount processed', {
      userId,
      amount
    });

  } catch (error) {
    logger.error('Error processing custom amount', {
      error,
      userId,
      input
    });

    // Send error message
    const bot = await getBotInstance();
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
} 