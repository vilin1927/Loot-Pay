import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../utils/logger';
import { setState } from '../../services/state/stateService';
import { calculateCommission } from '../../utils/commission';

const AMOUNT_PROMPT = `
üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:

5$ - 450‚ÇΩ
10$ - 900‚ÇΩ
15$ - 1350‚ÇΩ
20$ - 1800‚ÇΩ

–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö.
`;

const AMOUNT_ERROR = `
‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 5$
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100$

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.
`;

const AMOUNT_BUTTONS = [
  [
    { text: '5$', callback_data: 'amount_5' },
    { text: '10$', callback_data: 'amount_10' }
  ],
  [
    { text: '15$', callback_data: 'amount_15' },
    { text: '20$', callback_data: 'amount_20' }
  ],
  [
    { text: '‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_username' }
  ]
];

export async function handleAmountSelection(
  bot: TelegramBot,
  chatId: number,
  userId: number,
  amount?: string
): Promise<void> {
  try {
    if (!amount) {
      // Initial prompt
      await bot.sendMessage(
        chatId,
        AMOUNT_PROMPT,
        {
          reply_markup: {
            inline_keyboard: AMOUNT_BUTTONS
          }
        }
      );
      await setState(userId, 'AMOUNT_SELECTION', {});
      return;
    }

    // Parse amount
    const amountUSD = parseFloat(amount);
    if (isNaN(amountUSD) || amountUSD < 5 || amountUSD > 100) {
      await bot.sendMessage(chatId, AMOUNT_ERROR);
      return;
    }

    // Calculate commission
    const { totalAmountRUB } = calculateCommission(amountUSD, 90); // TODO: Get real exchange rate

    // Store amount and move to payment confirmation
    await setState(userId, 'AMOUNT_SELECTED', {
      amountUSD,
      totalAmountRUB
    });

    // Show payment confirmation
    await bot.sendMessage(
      chatId,
      `‚úÖ –°—É–º–º–∞: ${amountUSD}$ (${totalAmountRUB}‚ÇΩ)\n\n–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.`,
      {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', callback_data: 'confirm_payment' }
          ]]
        }
      }
    );

    logger.info('Amount selected', {
      userId,
      amountUSD,
      totalAmountRUB
    });

  } catch (error) {
    logger.error('Error handling amount selection', {
      error,
      userId,
      amount
    });
    throw error;
  }
} 