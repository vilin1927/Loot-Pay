import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../utils/logger';
import { setState, getState } from '../../services/state/stateService';
import { calculateCommission } from '../../utils/commission';
import { getSystemSetting } from '../../services/settings/settingsService';
import { formatRussianCurrency } from '../../utils/locale';

const MIN_AMOUNT_USD = 5;
const MAX_AMOUNT_USD = 100;

const AMOUNT_PROMPT = (minAmount: number, maxAmount: number) => `üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è –ª–∏–º–∏—Ç—ã:
‚Äî –ú–∏–Ω–∏–º—É–º: ${minAmount} USD 
‚Äî –ú–∞–∫—Å–∏–º—É–º: ${maxAmount} USD`;

const AMOUNT_TOO_LOW = (minAmount: number) => `‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è —Å—É–º–º–∞.
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî ${minAmount} USD. 
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω—å—à–µ —ç—Ç–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.`;

const AMOUNT_TOO_HIGH = (maxAmount: number) => `‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å—É–º–º–∞.
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî ${maxAmount} USD. 
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞.`;

const PAYMENT_DETAILS = (username: string, amountUSD: number, amountRUB: number) => `üîé –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π:

üßæ –£—Å–ª—É–≥–∞: –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Steam 
üë§ –ê–∫–∫–∞—É–Ω—Ç: ${username}
üíµ –°—É–º–º–∞: ${amountUSD} USD (‚âà${formatRussianCurrency(amountRUB)}) ‚Äî **–∫–æ–º–∏—Å—Å–∏—è 10% —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞**

‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–≥–∏–Ω –∏ —Å—É–º–º–∞ —É–∫–∞–∑–∞–Ω—ã –≤–µ—Ä–Ω–æ. 
–í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç —É–π—Ç–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
–ï—Å–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ üëá`;

export async function handleAmountSelection(
  bot: TelegramBot,
  chatId: number,
  userId: number,
  amount?: string
): Promise<void> {
  try {
    if (!amount) {
      // Get minimum and maximum amounts from settings
      const minAmount = await getSystemSetting('min_amount_usd') || MIN_AMOUNT_USD;
      const maxAmount = await getSystemSetting('max_amount_usd') || MAX_AMOUNT_USD;

      // Initial prompt
      await bot.sendMessage(
        chatId,
        AMOUNT_PROMPT(Number(minAmount), Number(maxAmount)),
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '5 USD', callback_data: 'amount_5' },
                { text: '10 USD', callback_data: 'amount_10' }
              ],
              [
                { text: '15 USD', callback_data: 'amount_15' },
                { text: '20 USD', callback_data: 'amount_20' }
              ],
              [
                { text: '–°–≤–æ—è —Å—É–º–º–∞ ü™ô', callback_data: 'amount_custom' }
              ],
              [
                { text: '–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω üîÑ', callback_data: 'steam_username' }
              ]
            ]
          }
        }
      );
      await setState(userId, 'AMOUNT_SELECTION', {});
      return;
    }

    // Parse amount
    const amountUSD = parseFloat(amount);
    if (isNaN(amountUSD)) {
      await bot.sendMessage(chatId, AMOUNT_TOO_LOW(MIN_AMOUNT_USD), {
        reply_markup: {
          inline_keyboard: [
            [
              { text: `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${MIN_AMOUNT_USD} USD`, callback_data: `amount_${MIN_AMOUNT_USD}` },
              { text: 'üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data: 'amount_custom' }
            ]
          ]
        }
      });
      return;
    }

    // Get minimum and maximum amounts from settings
    const minAmount = await getSystemSetting('min_amount_usd') || MIN_AMOUNT_USD;
    const maxAmount = await getSystemSetting('max_amount_usd') || MAX_AMOUNT_USD;

    // Validate amount limits
    if (amountUSD < Number(minAmount)) {
      await bot.sendMessage(chatId, AMOUNT_TOO_LOW(Number(minAmount)), {
        reply_markup: {
          inline_keyboard: [
            [
              { text: `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${minAmount} USD`, callback_data: `amount_${minAmount}` },
              { text: 'üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data: 'amount_custom' }
            ]
          ]
        }
      });
      return;
    }

    if (amountUSD > Number(maxAmount)) {
      await bot.sendMessage(chatId, AMOUNT_TOO_HIGH(Number(maxAmount)), {
        reply_markup: {
          inline_keyboard: [
            [
              { text: `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${maxAmount} USD`, callback_data: `amount_${maxAmount}` },
              { text: 'üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data: 'amount_custom' }
            ]
          ]
        }
      });
      return;
    }

    // Calculate commission
    const { totalAmountRUB } = calculateCommission(amountUSD, 90); // TODO: Get real exchange rate

    // Get state to access steam username
    const state = await getState(userId);
    if (!state || !state.state_data?.steamUsername) {
      throw new Error('Steam username not found in state');
    }

    // Store amount and move to payment confirmation
    await setState(userId, 'AMOUNT_SELECTED', {
      amountUSD,
      totalAmountRUB
    });

    // Show payment confirmation
    await bot.sendMessage(
      chatId,
      PAYMENT_DETAILS(state.state_data.steamUsername, amountUSD, totalAmountRUB),
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: `‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å –°–ë–ü [${formatRussianCurrency(totalAmountRUB)}]`, callback_data: 'confirm_payment' }
            ],
            [
              { text: 'üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω', callback_data: 'steam_username' },
              { text: 'üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É', callback_data: 'amount_custom' }
            ]
          ]
        }
      }
    );

    logger.info('Amount selected', {
      userId,
      amountUSD,
      totalAmountRUB
    });

  } catch (error) {
    logger.error('Error handling amount selection', {
      error,
      userId,
      amount
    });
    throw error;
  }
} 