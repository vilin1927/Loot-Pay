import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../../utils/logger';
import { setState } from '../../../services/state/stateService';
import { saveResponse } from '../../../services/questionnaire/questionnaireService';
import { showQuestion2 } from './question2';

const QUESTION = `
üéÆ –ö–∞–∫ –¥–∞–≤–Ω–æ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –≤ Steam?

1Ô∏è‚É£ –ú–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤
2Ô∏è‚É£ 6-12 –º–µ—Å—è—Ü–µ–≤
3Ô∏è‚É£ 1-2 –≥–æ–¥–∞
4Ô∏è‚É£ –ë–æ–ª–µ–µ 2 –ª–µ—Ç
`;

const BUTTONS = [
  [
    { text: '1Ô∏è‚É£ –ú–µ–Ω–µ–µ 6 –º–µ—Å—è—Ü–µ–≤', callback_data: 'q1_1' },
    { text: '2Ô∏è‚É£ 6-12 –º–µ—Å—è—Ü–µ–≤', callback_data: 'q1_2' }
  ],
  [
    { text: '3Ô∏è‚É£ 1-2 –≥–æ–¥–∞', callback_data: 'q1_3' },
    { text: '4Ô∏è‚É£ –ë–æ–ª–µ–µ 2 –ª–µ—Ç', callback_data: 'q1_4' }
  ]
];

export async function handleQuestion1(
  bot: TelegramBot,
  chatId: number,
  userId: number
): Promise<void> {
  try {
    // Send question
    await bot.sendMessage(
      chatId,
      QUESTION,
      {
        reply_markup: {
          inline_keyboard: BUTTONS
        }
      }
    );

    // Set state
    await setState(userId, 'QUESTIONNAIRE_Q1', {});

    logger.info('Question 1 sent', { userId });
  } catch (error) {
    logger.error('Error sending question 1', {
      error,
      userId
    });
    throw error;
  }
}

// Handle answer selection
export async function handleQuestion1Answer(
  chatId: number,
  userId: number,
  answer: string
) {
  try {
    // Save response
    await saveResponse(
      userId,
      1,
      QUESTION,
      answer
    );

    // Update state
    await setState(userId, 'QUESTIONNAIRE', {
      current_question: 2,
      question_type: 'payment'
    });

    logger.info('Saved question 1 answer', {
      userId,
      answer
    });

    // Show next question
    await showQuestion2(chatId, userId);

  } catch (error) {
    logger.error('Error handling question 1 answer', {
      error,
      userId,
      answer
    });

    // Send error message
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
} 