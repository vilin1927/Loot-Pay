import { Message } from 'node-telegram-bot-api';
import bot from '../../../bot';
import { logger } from '../../../utils/logger';
import { setState } from '../../../services/state/stateService';
import { db } from '../../../services/database/connection';

// Completion message
const COMPLETION_MESSAGE = `
‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!

–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–∏–º –≤–∞—à Steam –∫–æ—à–µ–ª–µ–∫:

1. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Steam –ª–æ–≥–∏–Ω
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
3. –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –°–ë–ü

–ù–∞—á–Ω–µ–º? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Steam –ª–æ–≥–∏–Ω:
`;

// Handle questionnaire completion
export async function handleQuestionnaireCompletion(
  chatId: number,
  userId: number
) {
  try {
    // Update user record
    await db('users')
      .where({ id: userId })
      .update({
        questionnaire_completed: true,
        questionnaire_completed_at: new Date().toISOString()
      });

    // Clear questionnaire state
    await setState(userId, 'STEAM_USERNAME', {
      started_at: new Date().toISOString()
    });

    // Send completion message
    await bot.sendMessage(chatId, COMPLETION_MESSAGE);

    logger.info('Completed questionnaire', {
      userId,
      next_state: 'STEAM_USERNAME'
    });

  } catch (error) {
    logger.error('Error completing questionnaire', {
      error,
      userId
    });

    // Send error message
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
} 