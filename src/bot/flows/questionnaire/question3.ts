import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../../utils/logger';
import { setState, UserState } from '../../../services/state/stateService';
import { saveResponse } from '../../../services/questionnaire/questionnaireService';
import { getBotInstance } from '../../../bot/botInstance';

const QUESTION = `‚ùì –ú—ã –¥–µ–ª–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ USD –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω (–∫—Ä–æ–º–µ UK) ‚Äî –≥—É–¥?`;

const BUTTONS = [
  [{ text: '‚úÖ –î–∞, –æ–∫', callback_data: 'q3_yes' }],
  [{ text: 'üá¨üáß –Ø –∏–∑ –ë—Ä–∏—Ç–∞–Ω–∏–∏', callback_data: 'q3_uk' }],
  [{ text: '‚ùå –ù–µ—Ç, –Ω–µ –≤ —Ç–µ–º—É', callback_data: 'q3_no' }]
];

export async function handleQuestion3(
  bot: TelegramBot,
  chatId: number,
  userId: number
): Promise<void> {
  try {
    await bot.sendMessage(
      chatId,
      QUESTION,
      {
        reply_markup: {
          inline_keyboard: BUTTONS
        }
      }
    );
    await setState(userId, 'QUESTIONNAIRE_Q3' as UserState, {});
    logger.info('Question 3 sent', { userId });
  } catch (error) {
    logger.error('Error sending question 3', { error, userId });
    throw error;
  }
}

export async function handleQuestion3Answer(
  chatId: number,
  userId: number,
  answer: string
) {
  try {
    const bot = await getBotInstance();
    await saveResponse(userId, 3, answer);
    await setState(userId, 'QUESTIONNAIRE_COMPLETE' as UserState, {
      completed: true,
      completed_at: new Date().toISOString()
    });
    logger.info('Saved question 3 answer', { userId, answer });
    await bot.sendMessage(
      chatId,
      'üéâ –ì–æ—Ç–æ–≤–æ! –¢—ã –ø—Ä–æ—à—ë–ª –æ–ø—Ä–æ—Å ‚Äî –∫—Ä–∞—Å–∞–≤—á–∏–∫! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ üôå \n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å LootPay –µ—â—ë —É–¥–æ–±–Ω–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ –¥–ª—è —Ç–µ–±—è.\nüîª –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ Steam, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –ø–æ–ø–æ–ª–Ω—è—Ç—å.\n‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–≥–∏–Ω –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.',
      {
        reply_markup: {
          inline_keyboard: [
            [ { text: 'üß† –ö–∞–∫ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω?', callback_data: 'steam_login_help' }, { text: '‚ÑπÔ∏è –ú–µ–Ω—é', callback_data: 'main_menu' } ]
          ]
        },
        parse_mode: 'Markdown'
      }
    );
  } catch (error) {
    logger.error('Error handling question 3 answer', { error, userId, answer });
    const bot = await getBotInstance();
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
} 