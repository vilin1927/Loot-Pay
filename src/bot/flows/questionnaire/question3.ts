import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../../utils/logger';
import { setState } from '../../../services/state/stateService';
import { saveResponse } from '../../../services/questionnaire/questionnaireService';

const QUESTION = `
üéÆ –ö–∞–∫–∏–µ –∏–≥—Ä—ã –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?

1Ô∏è‚É£ –®—É—Ç–µ—Ä—ã (CS2, Valorant)
2Ô∏è‚É£ –ú–ú–û (Dota 2, LoL)
3Ô∏è‚É£ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ (Stellaris, Civ)
4Ô∏è‚É£ –î—Ä—É–≥–æ–µ
`;

const BUTTONS = [
  [
    { text: '1Ô∏è‚É£ –®—É—Ç–µ—Ä—ã', callback_data: 'q3_1' },
    { text: '2Ô∏è‚É£ –ú–ú–û', callback_data: 'q3_2' }
  ],
  [
    { text: '3Ô∏è‚É£ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏', callback_data: 'q3_3' },
    { text: '4Ô∏è‚É£ –î—Ä—É–≥–æ–µ', callback_data: 'q3_4' }
  ]
];

export async function handleQuestion3(
  bot: TelegramBot,
  chatId: number,
  userId: number
): Promise<void> {
  try {
    // Send question
    await bot.sendMessage(
      chatId,
      QUESTION,
      {
        reply_markup: {
          inline_keyboard: BUTTONS
        }
      }
    );

    // Set state
    await setState(userId, 'QUESTIONNAIRE_Q3', {});

    logger.info('Question 3 sent', { userId });
  } catch (error) {
    logger.error('Error sending question 3', {
      error,
      userId
    });
    throw error;
  }
}

// Handle answer selection
export async function handleQuestion3Answer(
  chatId: number,
  userId: number,
  answer: string
) {
  try {
    // Save response
    await saveResponse(
      userId,
      3,
      QUESTION,
      answer
    );

    // Update state to complete
    await setState(userId, 'QUESTIONNAIRE', {
      completed: true,
      completed_at: new Date().toISOString()
    });

    logger.info('Saved question 3 answer', {
      userId,
      answer
    });

    // Send completion message
    await bot.sendMessage(
      chatId,
      '‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π Steam –∫–æ—à–µ–ª–µ–∫.'
    );

  } catch (error) {
    logger.error('Error handling question 3 answer', {
      error,
      userId,
      answer
    });

    // Send error message
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
} 