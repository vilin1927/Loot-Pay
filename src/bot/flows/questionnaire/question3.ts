import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../../utils/logger';
import { setState, UserState } from '../../../services/state/stateService';
import { saveResponse, ANSWER_TEXTS } from '../../../services/questionnaire/questionnaireService';
import { getBotInstance } from '../../../bot/botInstance';
import { db } from '../../../database/connection';

const QUESTION = `‚ùì –ú—ã –¥–µ–ª–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ USD –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω (–∫—Ä–æ–º–µ UK) ‚Äî –≥—É–¥?`;

const BUTTONS = [
  [{ text: '‚úÖ –î–∞, –æ–∫', callback_data: 'q3_yes' }],
  [{ text: 'üá¨üáß –Ø –∏–∑ –ë—Ä–∏—Ç–∞–Ω–∏–∏', callback_data: 'q3_uk' }],
  [{ text: '‚ùå –ù–µ—Ç, –Ω–µ –≤ —Ç–µ–º—É', callback_data: 'q3_no' }]
];

export async function handleQuestion3(
  bot: TelegramBot,
  chatId: number,
  userId: number
): Promise<void> {
  try {
    await bot.sendMessage(
      chatId,
      QUESTION,
      {
        reply_markup: {
          inline_keyboard: BUTTONS
        }
      }
    );
    await setState(userId, 'QUESTIONNAIRE_Q3' as UserState, {});
    logger.info('Question 3 sent', { userId });
  } catch (error) {
    logger.error('Error sending question 3', { error, userId });
    throw error;
  }
}

export async function handleQuestion3Answer(
  chatId: number,
  userId: number,
  answerCode: string
) {
  try {
    const bot = await getBotInstance();
    
    // Get full answer text from callback data
    const callbackData = `q3_${answerCode}`;
    const answerText = ANSWER_TEXTS[callbackData as keyof typeof ANSWER_TEXTS];
    
    if (!answerText) {
      throw new Error(`Unknown answer code: ${callbackData}`);
    }

    // Save response with full question and answer text
    await saveResponse(userId, 3, QUESTION, answerText);
    
    // Update users table to mark questionnaire as completed
    await db('users')
      .where('id', userId)
      .update({
        questionnaire_completed: true,
        questionnaire_completed_at: new Date()
      });
    
    await setState(userId, 'QUESTIONNAIRE_COMPLETE' as UserState, {
      completed: true,
      completed_at: new Date().toISOString()
    });
    
    logger.info('Saved question 3 answer and completed questionnaire', { userId, answerText });
    
    // Send completion message according to PRD
    await bot.sendMessage(
      chatId,
      'üéâ –ì–æ—Ç–æ–≤–æ! –¢—ã –ø—Ä–æ—à—ë–ª –æ–ø—Ä–æ—Å ‚Äî –∫—Ä–∞—Å–∞–≤—á–∏–∫! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è —Å–≤–æ–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏ üôå \n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å LootPay –µ—â—ë —É–¥–æ–±–Ω–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ –¥–ª—è —Ç–µ–±—è.\n\nüß© –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ Steam:\n\nüìñ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–∂–º–∏—Ç–µ "–ö–∞–∫ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω"\n\nüéØ –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n‚úÖ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ—á–Ω—ã–π –ª–æ–≥–∏–Ω\n‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–≤–∞–∂–¥—ã\n‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏\n\nüí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω = –±—ã—Å—Ç—Ä–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ',
      {
        reply_markup: {
          inline_keyboard: [
            [ { text: 'üß† –ö–∞–∫ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω?', callback_data: 'steam_login_help' }, { text: '‚ÑπÔ∏è –ú–µ–Ω—é', callback_data: 'main_menu' } ]
          ]
        },
        parse_mode: 'Markdown'
      }
    );
  } catch (error) {
    logger.error('Error handling question 3 answer', { error, userId, answerCode });
    const bot = await getBotInstance();
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
} 