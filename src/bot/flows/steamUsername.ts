import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../utils/logger';
import { setState } from '../../services/state/stateService';
import { payDigitalService } from '../../services/paydigital/paydigitalService';

// Type for Steam validation result
interface SteamValidationResult {
  isValid: boolean;
  transactionId?: string;
  message?: string;
}

const STEAM_USERNAME_PROMPT = `üß© –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ Steam:
‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–≥–∏–Ω –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É ‚Äî —Å—Ä–µ–¥—Å—Ç–≤–∞ –º–æ–≥—É—Ç —É–π—Ç–∏ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ –º—ã *–Ω–µ —Å–º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏*. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –¥–≤–∞–∂–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º!`;

const STEAM_USERNAME_HELP = `üîé –ì–¥–µ –≤–∑—è—Ç—å –ª–æ–≥–∏–Ω Steam?

–õ–æ–≥–∏–Ω ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.

–í–æ—Ç –∫–∞–∫ –µ–≥–æ —É–∑–Ω–∞—Ç—å:

1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Steam 
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –Ω–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É 
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–û–± –∞–∫–∫–∞—É–Ω—Ç–µ¬ª 
4Ô∏è‚É£ –í —Ä–∞–∑–¥–µ–ª–µ ¬´–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª –≤—ã —É–≤–∏–¥–∏—Ç–µ –ª–æ–≥–∏–Ω

üìé [–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Steam](https://store.steampowered.com/account/) 

üß© [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏](https://store.steampowered.com/login/?redir=account%2F&redir_ssl=1)`;

const STEAM_USERNAME_ERROR = `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ Steam.

–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –æ—à–∏–±–æ–∫) –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.

–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî [–≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –≥–¥–µ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω](https://store.steampowered.com/account/)`;

const STEAM_USERNAME_SUCCESS = (username: string) => `‚úÖ –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω!
üë§ –õ–æ–≥–∏–Ω: ${username}
üéÆ –í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!

üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∏–∂–µ:
‚Äî –ú–∏–Ω–∏–º—É–º: 5 USD 
‚Äî –ú–∞–∫—Å–∏–º—É–º: 100 USD
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É üëá`;

// ‚úÖ UPDATED: Export new validation function that returns transactionId
export async function validateSteamUsernameWithTransactionId(username: string): Promise<SteamValidationResult> {
  return await payDigitalService.validateSteamUsernameWithTransactionId(username);
}

// LEGACY: Export validateSteamUsername function for backward compatibility
export async function validateSteamUsername(username: string): Promise<boolean> {
  return await payDigitalService.validateSteamUsername(username);
}

export async function handleSteamUsernameRequest(
  bot: TelegramBot,
  chatId: number,
  userId: number,
  username?: string
): Promise<void> {
  try {
    if (!username) {
      // Initial prompt
      await bot.sendMessage(chatId, STEAM_USERNAME_PROMPT, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üß† –ö–∞–∫ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω?', callback_data: 'steam_login_help' },
              { text: '‚ÑπÔ∏è –ú–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      });
      await setState(userId, 'STEAM_USERNAME', {});
      return;
    }

    // ‚úÖ UPDATED: Validate username AND get transactionId in single call
    const validation = await validateSteamUsernameWithTransactionId(username);
    
    if (!validation.isValid) {
      await bot.sendMessage(chatId, STEAM_USERNAME_ERROR, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üß† –ö–∞–∫ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω?', callback_data: 'steam_login_help' }]
          ]
        }
      });
      return;
    }

    // ‚úÖ CRITICAL FIX: Store BOTH username AND transactionId for payment
    await setState(userId, 'AMOUNT_SELECTION', { 
      steamUsername: username,
      transactionId: validation.transactionId // ‚úÖ STORE transactionId for payment use
    });
    
    // Send success message with amount selection buttons
    await bot.sendMessage(chatId, STEAM_USERNAME_SUCCESS(username), {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '5 USD', callback_data: 'amount_5' },
            { text: '10 USD', callback_data: 'amount_10' }
          ],
          [
            { text: '15 USD', callback_data: 'amount_15' },
            { text: '20 USD', callback_data: 'amount_20' }
          ],
          [
            { text: '–°–≤–æ—è —Å—É–º–º–∞ ü™ô', callback_data: 'amount_custom' }
          ],
          [
            { text: '–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω üîÑ', callback_data: 'steam_username' }
          ]
        ]
      }
    });

    logger.info('Steam username validated with transactionId stored', {
      userId,
      username,
      transactionId: validation.transactionId
    });

  } catch (error) {
    logger.error('Error handling Steam username', {
      error,
      userId,
      username
    });
    throw error;
  }
}

export async function handleSteamUsernameHelp(
  bot: TelegramBot,
  chatId: number,
  userId: number
): Promise<void> {
  try {
    await bot.sendMessage(chatId, STEAM_USERNAME_HELP, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é üéÆ', callback_data: 'steam_username' }]
        ]
      }
    });
  } catch (error) {
    logger.error('Error sending Steam username help', {
      error,
      userId
    });
    throw error;
  }
} 