import TelegramBot from 'node-telegram-bot-api';
import { logger } from '../../utils/logger';
import { setState } from '../../services/state/stateService';
import { payDigitalService } from '../../services/paydigital/paydigitalService';
import { getSystemSetting } from '../../services/settings/settingsService';
import { analyticsService } from '../../services/analytics/analyticsService';
import { securityWidget } from '../ui/securityWidget';

// Type for Steam validation result
interface SteamValidationResult {
  isValid: boolean;
  transactionId?: string;
  message?: string;
}

// Input validation and sanitization
function sanitizeSteamUsername(input: string): string {
  // Remove leading/trailing whitespace
  let sanitized = input.trim();
  
  // Remove potentially dangerous characters
  sanitized = sanitized.replace(/[<>'"&]/g, '');
  
  // Steam usernames are alphanumeric with underscores, hyphens, and dots
  sanitized = sanitized.replace(/[^a-zA-Z0-9_.-]/g, '');
  
  return sanitized;
}

function validateSteamUsernameFormat(username: string): { isValid: boolean; message?: string } {
  // Basic format validation
  if (!username || username.length === 0) {
    return { isValid: false, message: '–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
  }
  
  if (username.length < 2) {
    return { isValid: false, message: '–õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)' };
  }
  
  if (username.length > 32) {
    return { isValid: false, message: '–õ–æ–≥–∏–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞)' };
  }
  
  // Check for valid Steam username characters
  const validPattern = /^[a-zA-Z0-9_.-]+$/;
  if (!validPattern.test(username)) {
    return { isValid: false, message: '–õ–æ–≥–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, —Ç–æ—á–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è' };
  }
  
  return { isValid: true };
}

const STEAM_USERNAME_PROMPT = `üß© –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞ Steam:

üìñ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–∂–º–∏—Ç–µ "–ö–∞–∫ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω"

üéØ –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:
‚úÖ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ—á–Ω—ã–π –ª–æ–≥–∏–Ω
‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–≤–∞–∂–¥—ã
‚úÖ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏

üí° –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω = –±—ã—Å—Ç—Ä–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ`;

const STEAM_USERNAME_HELP = `üîé –ì–¥–µ –≤–∑—è—Ç—å –ª–æ–≥–∏–Ω Steam?

–õ–æ–≥–∏–Ω ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–∫–∞–∑—ã–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.

–í–æ—Ç –∫–∞–∫ –µ–≥–æ —É–∑–Ω–∞—Ç—å:

1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Steam 
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –Ω–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É 
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ ¬´–û–± –∞–∫–∫–∞—É–Ω—Ç–µ¬ª 
4Ô∏è‚É£ –í —Ä–∞–∑–¥–µ–ª–µ ¬´–ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª –≤—ã —É–≤–∏–¥–∏—Ç–µ –ª–æ–≥–∏–Ω

üìé [–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Steam](https://store.steampowered.com/account/) 

üß© [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏](https://store.steampowered.com/login/?redir=account%2F&redir_ssl=1)`;

const STEAM_USERNAME_ERROR = `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç –≤ Steam.

–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –æ—à–∏–±–æ–∫) –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.

–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî [–≤–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –≥–¥–µ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω](https://store.steampowered.com/account/)`;

const STEAM_USERNAME_SUCCESS = async (username: string) => {
  const minAmount = Number(await getSystemSetting('min_amount_usd')) || 1;
  const maxAmount = Number(await getSystemSetting('max_amount_usd')) || 25;
  
  return `‚úÖ –ê–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω!
üë§ –õ–æ–≥–∏–Ω: ${username}
üéÆ –í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é!

üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∏–∂–µ:
‚Äî –ú–∏–Ω–∏–º—É–º: ${minAmount} USD 
‚Äî –ú–∞–∫—Å–∏–º—É–º: ${maxAmount} USD
–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É üëá`;
};

// Enhanced validation function with better error handling
export async function validateSteamUsernameWithTransactionId(username: string): Promise<SteamValidationResult> {
  try {
    const result = await payDigitalService.validateSteamUsernameWithTransactionId(username);
    
    // If validation failed, provide specific error messages based on common issues
    if (!result.isValid) {
      // Check for specific error patterns in the result
      if (result.message?.includes('not found') || result.message?.includes('404')) {
        return { 
          isValid: false, 
          message: 'Steam –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –ø—É–±–ª–∏—á–Ω—ã–π.' 
        };
      }
      
      if (result.message?.includes('restricted') || result.message?.includes('limited')) {
        return { 
          isValid: false, 
          message: '–ê–∫–∫–∞—É–Ω—Ç Steam –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏.' 
        };
      }
      
      if (result.message?.includes('timeout') || result.message?.includes('network')) {
        return { 
          isValid: false, 
          message: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Steam. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.' 
        };
      }
      
      // Default error message
      return { 
        isValid: false, 
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç Steam. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' 
      };
    }
    
    return result;
  } catch (error) {
    logger.error('Error in Steam validation', { error, username });
    
    // Return user-friendly error for any validation failures
    return { 
      isValid: false, 
      message: '–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.' 
    };
  }
}

// LEGACY: Export validateSteamUsername function for backward compatibility
export async function validateSteamUsername(username: string): Promise<boolean> {
  return await payDigitalService.validateSteamUsername(username);
}

export async function handleSteamUsernameRequest(
  bot: TelegramBot,
  chatId: number,
  userId: number,
  username?: string
): Promise<void> {
  try {
    if (!username) {
      // Initial prompt
      await bot.sendMessage(chatId, STEAM_USERNAME_PROMPT, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üß† –ö–∞–∫ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω?', callback_data: 'steam_login_help' },
              { text: '‚ÑπÔ∏è –ú–µ–Ω—é', callback_data: 'main_menu' }
            ]
          ]
        }
      });
      await setState(userId, 'STEAM_USERNAME', {});
      return;
    }

    // Sanitize input to prevent injection attacks
    const sanitizedUsername = sanitizeSteamUsername(username);
    
    // Validate username format first
    const formatValidation = validateSteamUsernameFormat(sanitizedUsername);
    if (!formatValidation.isValid) {
      await analyticsService.trackEvent(userId, 'steam_validation_failed', {
        reason: 'invalid_format',
        originalInput: username,
        sanitizedInput: sanitizedUsername,
        error: formatValidation.message
      });
      
      await bot.sendMessage(chatId, `‚ùå ${formatValidation.message}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–≥–∏–Ω –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.`, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üß† –ö–∞–∫ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω?', callback_data: 'steam_login_help' },
              { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'steam_username' }
            ]
          ]
        }
      });
      return;
    }

    // Track validation attempt
    await analyticsService.trackSteamValidationAttempted(userId, sanitizedUsername);

    // Validate username with PayDigital service
    const validation = await validateSteamUsernameWithTransactionId(sanitizedUsername);
    
    if (!validation.isValid) {
      await analyticsService.trackEvent(userId, 'steam_validation_failed', {
        reason: 'service_validation_failed',
        username: sanitizedUsername,
        error: validation.message
      });
      
      // Use specific error message from validation or fallback to default
      const errorMessage = validation.message || STEAM_USERNAME_ERROR;
      
      await bot.sendMessage(chatId, `‚ùå ${errorMessage}`, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üß† –ö–∞–∫ –Ω–∞–π—Ç–∏ –ª–æ–≥–∏–Ω?', callback_data: 'steam_login_help' },
              { text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'steam_username' }
            ],
            [
              { text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }
            ]
          ]
        }
      });
      return;
    }

    // Track successful validation
    await analyticsService.trackSteamValidationSuccess(userId, sanitizedUsername, validation.transactionId);

    // Store BOTH sanitized username AND transactionId for payment
    await setState(userId, 'AMOUNT_SELECTION', { 
      steamUsername: sanitizedUsername,
      transactionId: validation.transactionId
    });
    
    // Fixed preset amounts: 1, 10, 15, 20 USD
    function getPresetAmounts(): number[] {
      return [1, 10, 15, 20];
    }
    
    const presetAmounts = getPresetAmounts();
    
    // Build dynamic keyboard
    const keyboard: any[][] = [];
    
    // Add preset amounts in rows of 2
    for (let i = 0; i < presetAmounts.length; i += 2) {
      const row = [];
      row.push({ text: `${presetAmounts[i]} USD`, callback_data: `amount_${presetAmounts[i]}` });
      if (presetAmounts[i + 1]) {
        row.push({ text: `${presetAmounts[i + 1]} USD`, callback_data: `amount_${presetAmounts[i + 1]}` });
      }
      keyboard.push(row);
    }
    
    // Add custom amount and change login buttons
    keyboard.push([{ text: '–°–≤–æ—è —Å—É–º–º–∞ ü™ô', callback_data: 'amount_custom' }]);
    keyboard.push([{ text: '–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥–∏–Ω üîÑ', callback_data: 'steam_username' }]);

    // Send success message with amount selection buttons
    const successMessage = await STEAM_USERNAME_SUCCESS(sanitizedUsername);
    await bot.sendMessage(chatId, successMessage, {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

    // Show security trust widget after username validation (phase-2)
    const secMsg = securityWidget();
    await bot.sendMessage(chatId, secMsg.text, secMsg.options);

    logger.info('Steam username validated with transactionId stored', {
      userId,
      username,
      transactionId: validation.transactionId
    });

  } catch (error) {
    logger.error('Error handling Steam username', {
      error,
      userId,
      username
    });
    throw error;
  }
}

export async function handleSteamUsernameHelp(
  bot: TelegramBot,
  chatId: number,
  userId: number
): Promise<void> {
  try {
    await bot.sendMessage(chatId, STEAM_USERNAME_HELP, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é üéÆ', callback_data: 'steam_username' }]
        ]
      }
    });
  } catch (error) {
    logger.error('Error sending Steam username help', {
      error,
      userId
    });
    throw error;
  }
} 