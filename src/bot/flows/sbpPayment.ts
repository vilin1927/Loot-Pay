import { getBotInstance } from '../botInstance';
import { logger } from '../../utils/logger';
import { getState, setState } from '../../services/state/stateService';
import { createPayment } from '../../services/payment/paymentService';
import { formatRussianCurrency } from '../../utils/locale';

// Payment processing message
const PAYMENT_PROCESSING_MESSAGE = `‚è≥ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ.  

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–ª–∞—Ç—ë–∂ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –º—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å –∑–¥–µ—Å—å –≤ —á–∞—Ç–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤—Ä—É—á–Ω—É—é.
‚è≥ –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É`;

// Payment link message
const PAYMENT_LINK_MESSAGE = `
üí≥ –û–ø–ª–∞—Ç–∞ –≥–æ—Ç–æ–≤–∞!

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü:

–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount_rub} ‚ÇΩ
–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 15 –º–∏–Ω—É—Ç

‚ö†Ô∏è –í–∞–∂–Ω–æ: –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —á–∞—Ç –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
`;

// Handle SBP payment creation
export async function handleSbpPayment(
  chatId: number,
  userId: number
) {
  try {
    // Get bot instance
    const bot = await getBotInstance();

    // Get user state
    const state = await getState(userId);
    if (!state || state.current_state !== 'AMOUNT_SELECTED') {
      throw new Error('Invalid state for SBP payment');
    }

    // ‚úÖ CHECK: Ensure we have required data including transactionId
    const { steamUsername, amountUSD, transactionId } = state.state_data;
    
    if (!steamUsername || !amountUSD || !transactionId) {
      logger.error('Missing required payment data in SBP flow', {
        userId,
        hasUsername: !!steamUsername,
        hasAmount: !!amountUSD,
        hasTransactionId: !!transactionId
      });
      throw new Error('Missing required payment data');
    }

    // Show processing message
    await bot.sendMessage(chatId, PAYMENT_PROCESSING_MESSAGE, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üõ† –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', callback_data: 'support' }]
        ]
      }
    });

    // ‚úÖ USE: New centralized payment service with required transactionId
    const payment = await createPayment(userId, steamUsername, amountUSD, transactionId);

    // Format amount
    const formattedAmount = formatRussianCurrency(payment.totalAmountRUB);

    // Show payment link
    await bot.sendMessage(
      chatId,
      PAYMENT_LINK_MESSAGE.replace('{amount_rub}', formattedAmount),
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url: payment.paymentUrl }
            ],
            [
              { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_payment' }
            ]
          ]
        }
      }
    );

    // Update state
    await setState(userId, 'PAYMENT_PENDING', {
      ...state.state_data,
      databaseTransactionId: payment.transactionId,
      paymentUrl: payment.paymentUrl,
      expires_at: new Date(Date.now() + 15 * 60 * 1000) // 15 minutes
    });

    logger.info('SBP payment created using new service', {
      userId,
      databaseTransactionId: payment.transactionId,
      amount: payment.totalAmountRUB,
      transactionId,
      paymentUrl: payment.paymentUrl
    });

  } catch (error) {
    logger.error('Error creating SBP payment', {
      error,
      userId
    });

    // Get bot instance for error message
    const bot = await getBotInstance();

    // Send error message
    await bot.sendMessage(
      chatId,
      'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üõ† –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', callback_data: 'support' }]
          ]
        }
      }
    );
  }
} 