import TelegramBot from 'node-telegram-bot-api';
import { startSurvey, saveAnswer, completeSurvey, skipSurvey } from '../../services/survey/surveyService';
import { setState } from '../../services/state/stateService';

// Questions definitions
export const SURVEY_QUESTIONS = {
  1: {
    text: '‚ùì –ß—Ç–æ —Ç–µ–±—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ? ',
    options: [
      { code: 'A', text: 'üí∞ –í—ã—Å–æ–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è (10%)' },
      { code: 'B', text: 'üõ° –°–æ–º–Ω–µ–Ω–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' },
      { code: 'C', text: 'ü§î –°–ª–æ–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è' },
      { code: 'D', text: '‚è∞ –ü–µ—Ä–µ–¥—É–º–∞–ª –ø–æ–ø–æ–ª–Ω—è—Ç—å' },
      { code: 'E', text: 'üì± –ü—Ä–æ—Å—Ç–æ –∏–∑—É—á–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏' }
    ]
  },
  2: {
    text: '‚ùì –ü–æ–ª—å–∑—É–µ—à—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è?',
    options: [
      { code: '1', text: '‚úÖ –î–∞, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ' },
      { code: '2', text: 'üîÑ –ò–Ω–æ–≥–¥–∞ –ø–æ–ª—å–∑—É—é—Å—å' },
      { code: '3', text: '‚ùå –ù–µ—Ç, –Ω–µ –ø–æ–ª—å–∑—É—é—Å—å' },
      { code: '4', text: 'üÜï LootPay ‚Äî –ø–µ—Ä–≤—ã–π' }
    ]
  },
  3: {
    text: '‚ùì –ß—Ç–æ —É–±–µ–¥–∏–ª–æ –±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?',
    options: [
      { code: 'I', text: 'üî• –°–∫–∏–¥–∫–∞ –Ω–∞ –∫–æ–º–∏—Å—Å–∏—é (5% –≤–º–µ—Å—Ç–æ 10%)' },
      { code: 'II', text: 'üéÅ –ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—É—é –ø–æ–∫—É–ø–∫—É' },
      { code: 'III', text: 'üë• –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
      { code: 'IV', text: 'üõ° –ì–∞—Ä–∞–Ω—Ç–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏' },
      { code: 'V', text: 'üì± –ü—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å' }
    ]
  }
} as const;

type QuestionNo = 1 | 2 | 3;

export async function sendSurveyQuestion(bot: TelegramBot, chatId: number, userId: number, q: QuestionNo) {
  const question = SURVEY_QUESTIONS[q];
  const keyboard = {
    inline_keyboard: question.options.map(o => [{ text: o.text, callback_data: `s${q}_${o.code}` }])
  };
  await bot.sendMessage(chatId, question.text, { reply_markup: keyboard });
  await setState(userId, `SURVEY_Q${q}`, {});
}

export async function startGiftSurvey(bot: TelegramBot, chatId: number, userId: number) {
  await startSurvey(userId);
  await sendSurveyQuestion(bot, chatId, userId, 1);
}

export async function skipGiftSurvey(bot: TelegramBot, chatId: number, userId: number) {
  await skipSurvey(userId);
  await bot.sendMessage(chatId, '–û–∫–µ–π, —Å–ø–∞—Å–∏–±–æ! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –º—ã –Ω–∞ —Å–≤—è–∑–∏.');
}

export async function handleSurveyCallback(bot: TelegramBot, chatId: number, userId: number, data: string) {
  // data format: s{q}_{code}
  const parts = data.split('_');
  const qNo = Number(parts[0].substring(1)) as QuestionNo;
  const code = parts[1];

  if (qNo === 2 && code === '1') {
    // Need free text after this
    await saveAnswer(userId, 2, code);
    await bot.sendMessage(chatId, '–ù–∞–ø–∏—à–∏, –∫–∞–∫–∏–º —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–ª—å–∑—É–µ—à—å—Å—è:');
    await setState(userId, 'SURVEY_Q2_TEXT', {});
    return;
  }

  await saveAnswer(userId, qNo, code);

  if (qNo === 1) {
    await sendSurveyQuestion(bot, chatId, userId, 2);
  } else if (qNo === 2) {
    await sendSurveyQuestion(bot, chatId, userId, 3);
  } else {
    // Completed
    await completeSurvey(userId);
    await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '1 USD –Ω–∞ Steam', callback_data: 'gift_steam' }],
          [{ text: '100 ‚ÇΩ –Ω–∞ –°–ë–ü', callback_data: 'gift_sbp' }]
        ]
      }
    });
    await setState(userId, 'SURVEY_GIFT_CHOICE', {});
  }
} 