import { logger } from './logger';
import { clearState } from '../services/state/stateService';
import { getBotInstance } from '../bot/botInstance';
import { analyticsService } from '../services/analytics/analyticsService';

// Error types that require state clearing
const STATE_CLEARING_ERRORS = [
  'INVALID_STATE',
  'EXPIRED_STATE',
  'PAYMENT_FAILED',
  'API_ERROR'
];

// Enhanced user-friendly error messages with specific actions
const ERROR_MESSAGES = {
  DEFAULT: 'üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
  PAYMENT: {
    GENERAL: 'üí≥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
    DUPLICATE: 'üí≥ –≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏.',
    INSUFFICIENT_FUNDS: 'üí≥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ —Å—á—ë—Ç–∞.',
    TIMEOUT: 'üí≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂.',
    INVALID_PARAMS: 'üí≥ –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.'
  },
  STEAM: {
    GENERAL: 'üéÆ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Steam –∞–∫–∫–∞—É–Ω—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
    NOT_FOUND: 'üéÆ Steam –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–æ–≥–∏–Ω –≤–≤–µ–¥—ë–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.',
    RESTRICTED: 'üéÆ –ê–∫–∫–∞—É–Ω—Ç Steam –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Steam.',
    TIMEOUT: 'üéÆ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Steam. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.',
    INVALID_FORMAT: 'üéÆ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞ Steam. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.'
  },
  API: {
    GENERAL: 'üåê –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
    EXCHANGE_RATE: 'üí± –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.',
    NETWORK: 'üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.'
  },
  VALIDATION: {
    GENERAL: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
    AMOUNT: 'üí∞ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.',
    USERNAME: 'üë§ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∏–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã.',
    LIMIT: '‚ö†Ô∏è –°—É–º–º–∞ –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.'
  },
  STATE: '‚è∞ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
  DATABASE: 'üóÑÔ∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
};

/**
 * Enhanced error classification and message selection
 */
function getErrorMessage(error: Error): string {
  const message = error.message.toLowerCase();
  
  // Steam-related errors
  if (message.includes('steam')) {
    if (message.includes('not found') || message.includes('404')) {
      return ERROR_MESSAGES.STEAM.NOT_FOUND;
    }
    if (message.includes('restricted') || message.includes('limited')) {
      return ERROR_MESSAGES.STEAM.RESTRICTED;
    }
    if (message.includes('timeout') || message.includes('network')) {
      return ERROR_MESSAGES.STEAM.TIMEOUT;
    }
    if (message.includes('format') || message.includes('characters')) {
      return ERROR_MESSAGES.STEAM.INVALID_FORMAT;
    }
    return ERROR_MESSAGES.STEAM.GENERAL;
  }
  
  // Payment-related errors
  if (message.includes('payment') || message.includes('–ø–ª–∞—Ç–µ–∂')) {
    if (message.includes('duplicate') || message.includes('—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞')) {
      return ERROR_MESSAGES.PAYMENT.DUPLICATE;
    }
    if (message.includes('insufficient') || message.includes('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ')) {
      return ERROR_MESSAGES.PAYMENT.INSUFFICIENT_FUNDS;
    }
    if (message.includes('timeout') || message.includes('–≤—Ä–µ–º—è')) {
      return ERROR_MESSAGES.PAYMENT.TIMEOUT;
    }
    if (message.includes('invalid') || message.includes('–Ω–µ–≤–µ—Ä–Ω')) {
      return ERROR_MESSAGES.PAYMENT.INVALID_PARAMS;
    }
    return ERROR_MESSAGES.PAYMENT.GENERAL;
  }
  
  // API-related errors
  if (message.includes('api') || message.includes('service')) {
    if (message.includes('exchange') || message.includes('rate')) {
      return ERROR_MESSAGES.API.EXCHANGE_RATE;
    }
    if (message.includes('network') || message.includes('connection')) {
      return ERROR_MESSAGES.API.NETWORK;
    }
    return ERROR_MESSAGES.API.GENERAL;
  }
  
  // Validation errors
  if (message.includes('validation') || message.includes('invalid')) {
    if (message.includes('amount') || message.includes('—Å—É–º–º–∞')) {
      return ERROR_MESSAGES.VALIDATION.AMOUNT;
    }
    if (message.includes('username') || message.includes('–ª–æ–≥–∏–Ω')) {
      return ERROR_MESSAGES.VALIDATION.USERNAME;
    }
    if (message.includes('limit') || message.includes('–ø—Ä–µ–¥–µ–ª')) {
      return ERROR_MESSAGES.VALIDATION.LIMIT;
    }
    return ERROR_MESSAGES.VALIDATION.GENERAL;
  }
  
  // State errors
  if (message.includes('state') || message.includes('session') || message.includes('—Å–µ—Å—Å–∏—è')) {
    return ERROR_MESSAGES.STATE;
  }
  
  // Database errors
  if (message.includes('database') || message.includes('sql') || message.includes('db')) {
    return ERROR_MESSAGES.DATABASE;
  }
  
  return ERROR_MESSAGES.DEFAULT;
}

/**
 * Enhanced bot error handler with analytics and improved classification
 */
export async function handleBotError(
  error: Error,
  chatId: number,
  userId: number,
  context: {
    action?: string;
    state?: string;
    data?: any;
    shouldClearState?: boolean;
  } = {}
): Promise<void> {
  try {
    // Track error in analytics
    await analyticsService.trackEvent(userId, 'bot_error_occurred', {
      errorName: error.name,
      errorMessage: error.message,
      action: context.action,
      state: context.state,
      data: context.data,
      timestamp: new Date().toISOString()
    });

    // Get bot instance
    const bot = await getBotInstance();

    // Log error details with enhanced context
    logger.error('Bot error occurred', {
      error: {
        name: error.name,
        message: error.message,
        stack: error.stack
      },
      userId,
      chatId,
      context,
      timestamp: new Date().toISOString()
    });

    // Get appropriate error message
    const errorMessage = getErrorMessage(error);
    let shouldClearState = context.shouldClearState;

    // Determine if state should be cleared
    if (error.message.includes('state') || STATE_CLEARING_ERRORS.includes(error.name)) {
      shouldClearState = true;
    }

    // Clear state if needed
    if (shouldClearState) {
      await clearState(userId);
      logger.info('User state cleared after error', {
        userId,
        error: error.name
      });
    }

    // Send user-friendly message with appropriate keyboard
    const keyboard = [];
    
    // Add retry button for certain error types
    if (error.message.includes('timeout') || error.message.includes('network')) {
      keyboard.push([{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'retry_last_action' }]);
    }
    
    // Add support button for critical errors
    if (error.name === 'API_ERROR' || error.name === 'PAYMENT_FAILED' || 
        error.message.includes('critical') || error.message.includes('database')) {
      keyboard.push([{ text: '‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data: 'support' }]);
    }
    
    // Always add main menu button
    keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

    await bot.sendMessage(chatId, errorMessage, {
      reply_markup: {
        inline_keyboard: keyboard
      }
    });

  } catch (handlerError) {
    // Log error in error handler
    logger.error('Error in error handler', {
      originalError: error,
      handlerError,
      userId,
      chatId
    });

    // Send fallback message
    try {
      const bot = await getBotInstance();
      await bot.sendMessage(
        chatId,
        'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @lootpay_support'
      );
    } catch (sendError) {
      logger.error('Failed to send error message', {
        error: sendError,
        userId,
        chatId
      });
    }
  }
}

/**
 * Create custom error with type
 */
export class BotError extends Error {
  constructor(
    message: string,
    public type: string,
    public context?: any
  ) {
    super(message);
    this.name = type;
  }
}

// Export error types
export const ErrorTypes = {
  INVALID_STATE: 'INVALID_STATE',
  EXPIRED_STATE: 'EXPIRED_STATE',
  PAYMENT_FAILED: 'PAYMENT_FAILED',
  API_ERROR: 'API_ERROR',
  VALIDATION_ERROR: 'VALIDATION_ERROR',
  STEAM_ERROR: 'STEAM_ERROR'
} as const;

export async function handleError(
  chatId: number,
  error: Error,
  context?: Record<string, any>
) {
  try {
    // Get bot instance
    const bot = await getBotInstance();

    // Log error
    logger.error('Bot error occurred', {
      error: error.message,
      stack: error.stack,
      context
    });

    // Send error message to user
    await bot.sendMessage(
      chatId,
      'üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  } catch (sendError) {
    // Log error sending error
    logger.error('Failed to send error message', {
      error: sendError,
      originalError: error
    });
  }
} 